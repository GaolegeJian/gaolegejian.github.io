<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[重新学习C语音]]></title>
      <url>http://yoursite.com/2016/10/18/%E9%87%8D%E5%86%99%E5%AD%A6%E4%B9%A0C%E8%AF%AD%E9%9F%B3/</url>
      <content type="html"><![CDATA[<p>立个flag，一个月把《C Primer Plus》、《C和指针》、《啊哈算法》刷完并理解。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[View的封装]]></title>
      <url>http://yoursite.com/2016/10/16/View%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<h3 id="View的封装"><a href="#View的封装" class="headerlink" title="View的封装"></a>View的封装</h3><ul>
<li>如果一个view内部的子控件比较多，一般会考虑自定义一个view，把它内部子控件的创建屏蔽起来，不让外界关心</li>
<li>外界可以传入对应的模型数据给view，view拿到模型数据后给内部的子控件设置对应的数据</li>
<li>封装控件的基本步骤<ul>
<li>在initWithFrame:方法中添加子控件，提供便利构造方法</li>
<li>在layoutSubviews方法中设置子控件的frame（一定要调用super的layoutSubviews）</li>
<li>增加模型属性，在模型属性set方法中设置数据到子控件上</li>
</ul>
</li>
</ul>
<h3 id="简单的MVC"><a href="#简单的MVC" class="headerlink" title="简单的MVC"></a>简单的MVC</h3><p><img src="/image/View%E7%9A%84%E5%B0%81%E8%A3%85/%E7%AE%80%E5%8D%95%E7%9A%84MVC.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[plist文件和加载数据]]></title>
      <url>http://yoursite.com/2016/10/16/plist%E6%96%87%E4%BB%B6%E5%92%8C%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h3 id="什么是plist文件"><a href="#什么是plist文件" class="headerlink" title="什么是plist文件"></a>什么是plist文件</h3><p>将数据直接写在代码里面，不是一种合理的做法。如果数据经常改，就要经常翻开对应的代码进行修改，造成代码扩展性低；</p>
<p>因此，可以考虑将经常变的数据放在文件中进行存储，程序启动后从文件中读取最新的数据。如果要变动数据，直接修改数据文件即可，不用修改代码；</p>
<p>一般可以使用属性列表文件存储NSArray或者NSDictionary之类的数据，这种“属性列表文件”的扩展名是plist，因此也称为“plist文件”。</p>
<h3 id="创建plist文件"><a href="#创建plist文件" class="headerlink" title="创建plist文件"></a>创建plist文件</h3><p><img src="/image/plist%E6%96%87%E4%BB%B6%E5%92%8C%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/%E5%88%9B%E5%BB%BAplist%E6%96%87%E4%BB%B6.png" alt=""></p>
<h3 id="解析plist文件"><a href="#解析plist文件" class="headerlink" title="解析plist文件"></a>解析plist文件</h3><ul>
<li>通过代码来解析plist文件中的数据</li>
<li>获得plist文件的全路径<br>  ````objc<pre><code>NSBundle *bundle = [NSBundle mainBundle];
NSString *path = [bundle pathForResource:@&quot;shops&quot; ofType:@&quot;plist&quot;];
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- 加载plist文件</div><div class="line">	\`\`\`\`objc</div><div class="line">		_shops = [NSArray arrayWithContentsOfFile:path];</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<h3 id="plist文件的解析过程"><a href="#plist文件的解析过程" class="headerlink" title="plist文件的解析过程"></a>plist文件的解析过程</h3><p><img src="/image/plist%E6%96%87%E4%BB%B6%E5%92%8C%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/plist%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B.png" alt=""></p>
<h3 id="plist文件的使用注意"><a href="#plist文件的使用注意" class="headerlink" title="plist文件的使用注意"></a>plist文件的使用注意</h3><ul>
<li>plist的文件名不能叫做“info”、“Info”之类的</li>
<li>添加plist等文件资源的时候，一定要勾选下面的选项</li>
<li><img src="/image/plist%E6%96%87%E4%BB%B6%E5%92%8C%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/plist%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.png" alt=""></li>
</ul>
<h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><ul>
<li>作用<ul>
<li>用到的时候会来加载<ul>
<li>全局只能被加载一次</li>
<li>全局都可以使用</li>
</ul>
</li>
</ul>
</li>
<li>过程<ul>
<li>重写成员变量的get方法</li>
<li>在get方法中判断:<ul>
<li>如果为空, 加载数据</li>
<li>如果不为空, 直接返回数据 </li>
</ul>
</li>
</ul>
</li>
<li><p>代码实现懒加载<br>  ````objc</p>
<pre><code>- (NSArray *)dataArr{
    if (_dataArr == nil) {
        NSString *dataPath = [[NSBundle mainBundle] pathForResource:@&quot;shopData.plist&quot; ofType:nil];
        self.dataArr = [NSArray arrayWithContentsOfFile:dataPath];
        NSMutableArray *tempArr = [NSMutableArray array];
        for (NSDictionary *dict in self.dataArr) {
            GJShop *shop = [GJShop shopWithDict:dict];
            [tempArr addObject:shop];
        }
        self.dataArr = tempArr;
    }
    return _dataArr;
}
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 模型</div><div class="line"></div><div class="line">### 用模型取代字典的好处</div><div class="line">- 使用字典的坏处</div><div class="line">- 一般情况下，设置数据和取出数据都使用“字符串类型的key”，编写这些key时，编辑器没有智能提示，需要手敲</div><div class="line">	\`\`\`\`objc</div><div class="line">		dict[@&quot;name&quot;] = @&quot;Jack&quot;;</div><div class="line">		NSString *name = dict[@&quot;name&quot;];</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>手敲字符串key，key容易写错</p>
</li>
<li>Key如果写错了，编译器不会有任何警告和报错，造成设错数据或者取错数据</li>
<li>使用模型的好处</li>
<li>所谓模型，其实就是数据模型，专门用来存放数据的对象，用它来表示数据会更加专业</li>
<li>模型设置数据和取出数据都是通过它的属性，属性名如果写错了，编译器会马上报错，因此，保证了数据的正确性</li>
<li>使用模型访问属性时，编译器会提供一系列的提示，提高编码效率<br>  ````objc<pre><code>app.name = @&quot;Jack&quot;;
NSString *name = app.name;
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 字典转模型</div><div class="line">- 字典转模型的过程最好封装在模型内部</div><div class="line">- 模型应该提供一个可以传入字典参数的构造方法</div><div class="line">	\`\`\`\`objc</div><div class="line">		- (instancetype)initWithDict:(NSDictionary *)dict;</div><div class="line">		+ (instancetype)xxxWithDict:(NSDictionary *)dict;</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<h3 id="instancetype"><a href="#instancetype" class="headerlink" title="instancetype"></a>instancetype</h3><ul>
<li>instancetype在类型表示上，跟id一样，可以表示任何对象类型</li>
<li>instancetype只能用在返回值类型上，不能像id一样用在参数类型</li>
<li>instancetype比id多一个好处：编译器会检测instancetype的真实类型</li>
</ul>
<h3 id="类前缀"><a href="#类前缀" class="headerlink" title="类前缀"></a>类前缀</h3><ul>
<li>使用Objective-C开发iOS程序时，最好在每个类名前面加一个前缀，用来标识这个类的“老家”在哪</li>
<li>目的是防止N个人开发了一样的类，冲突了比如Jake Will、Kate Room在同一个项目中都各自开发了个Button类，这样的程序是不能运行起来的</li>
<li>解决方案：Jake Will的类名叫做JWButton，Kate Room的类名叫做KRButton</li>
</ul>
<h3 id="字典转模型的过程"><a href="#字典转模型的过程" class="headerlink" title="字典转模型的过程"></a>字典转模型的过程</h3><p><img src="/image/plist%E6%96%87%E4%BB%B6%E5%92%8C%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/%E5%AD%97%E5%85%B8%E8%BD%AC%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[九宫格计算思路]]></title>
      <url>http://yoursite.com/2016/10/16/%E4%B9%9D%E5%AE%AB%E6%A0%BC%E8%AE%A1%E7%AE%97%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h3 id="九宫格计算思路"><a href="#九宫格计算思路" class="headerlink" title="九宫格计算思路"></a>九宫格计算思路</h3><p><img src="/image/%E4%B9%9D%E5%AE%AB%E6%A0%BC%E8%AE%A1%E7%AE%97%E6%80%9D%E8%B7%AF/%E4%B9%9D%E5%AE%AB%E6%A0%BC%E8%AE%A1%E7%AE%97%E6%80%9D%E8%B7%AF.png" alt=""></p>
<h4 id="九宫格功能一"><a href="#九宫格功能一" class="headerlink" title="九宫格功能一"></a>九宫格功能一</h4><ul>
<li>在同一行不断添加View</li>
<li>Y值不变，X值 = (水平间距 + 宽度) * (个数 % 3)</li>
<li>(hMargin + width) * (0 % 3)     </li>
<li>(hMargin + width) * (1 % 3)      </li>
<li>(hMargin + width) * (3 % 3) </li>
</ul>
<h4 id="九宫格功能二"><a href="#九宫格功能二" class="headerlink" title="九宫格功能二"></a>九宫格功能二</h4><ul>
<li>在不同行不断添加View</li>
<li>Y值 = (垂直间距 + 高度) * (个数 / 3)</li>
<li>X值 = (水平间距 + 宽度) * (个数 % 3)</li>
<li>(vMargin + height) * (0 1 2 / 3) = 0</li>
<li>(vMargin + height) * (3 4 5 / 3) = 1</li>
<li>(vMargin + height) * (6  7 8 / 3) =  2</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UI常用控件概述]]></title>
      <url>http://yoursite.com/2016/10/11/UI%E6%8E%A7%E4%BB%B6%E5%B8%B8%E7%94%A8%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>UINavigationBar – 导航条 </li>
<li>UIDatePicker – 日期选择器</li>
<li>UIToolbar – 工具条</li>
<li>UIPickerView – 选择器</li>
<li>UISegmentControl – 选项卡</li>
<li>UISwitch – 开关</li>
<li>UIWebView – 网页显示控件</li>
<li>UICollectionView – 九宫格</li>
<li>UITableView – 表格</li>
<li>UIPageControl – 分页控件</li>
<li>UIScrollView – 滚动的控件</li>
<li>UIActionSheet – 底部弹框</li>
<li>UIAlertView – 对话框（中间弹框</li>
<li>UIActivityIndicator – 圈圈</li>
<li>UISlider – 滑块</li>
<li>UIProgressView – 进度条</li>
<li>UITextView – 能滚动的文字显示控件</li>
<li>UITextField – 文本输入框</li>
<li>UIButton – 按钮</li>
<li>UILabel用于显示文本</li>
</ul>
<h3 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h3><h5 id="什么是UILabel"><a href="#什么是UILabel" class="headerlink" title="什么是UILabel"></a>什么是UILabel</h5><ul>
<li>UILabel极其常用，功能比较专一：显示文字</li>
</ul>
<h5 id="UILabel的常见属性"><a href="#UILabel的常见属性" class="headerlink" title="UILabel的常见属性"></a>UILabel的常见属性</h5><pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span> *text;   <span class="comment">//显示的文字</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">retain</span>) <span class="built_in">UIFont</span> *font;    <span class="comment">//字体</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">retain</span>) <span class="built_in">UIColor</span> *textColor;  <span class="comment">//文字颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSTextAlignment</span>    textAlignment;  <span class="comment">//对齐模式（比如左对齐、居中对齐、右对齐） </span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> numberOfLines;  <span class="comment">//文字行数</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">NSLineBreakMode</span>    lineBreakMode;  <span class="comment">//换行模式</span></div></pre></td></tr></table></figure>
</code></pre><h3 id="UIFont"><a href="#UIFont" class="headerlink" title="UIFont"></a>UIFont</h3><ul>
<li>UIFont代表字体</li>
</ul>
<h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">UIFont</span> *)systemFontOfSize:(<span class="built_in">CGFloat</span>)fontSize;   <span class="comment">//系统默认字体</span></div><div class="line">+ (<span class="built_in">UIFont</span> *)boldSystemFontOfSize:(<span class="built_in">CGFloat</span>)fontSize;  <span class="comment">//粗体</span></div><div class="line">+ (<span class="built_in">UIFont</span> *)italicSystemFontOfSize:(<span class="built_in">CGFloat</span>)fontSize;  <span class="comment">//斜体</span></div></pre></td></tr></table></figure>
</code></pre><h3 id="UIImageView"><a href="#UIImageView" class="headerlink" title="UIImageView"></a>UIImageView</h3><h5 id="什么是UIImageView"><a href="#什么是UIImageView" class="headerlink" title="什么是UIImageView"></a>什么是UIImageView</h5><ul>
<li>UIImageView极其常用，功能比较专一：显示图片</li>
</ul>
<h5 id="UIImageView常见的属性"><a href="#UIImageView常见的属性" class="headerlink" title="UIImageView常见的属性"></a>UIImageView常见的属性</h5><pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">retain</span>) <span class="built_in">UIImage</span> *image;   <span class="comment">//显示的图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSArray</span> *animationImages;  <span class="comment">//显示的动画图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> animationDuration;  <span class="comment">//动画图片的持续时间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span>      animationRepeatCount;  <span class="comment">//动画的播放次数（默认是0，代表无限播放）</span></div></pre></td></tr></table></figure>
</code></pre><h5 id="UIImageView常见的方法"><a href="#UIImageView常见的方法" class="headerlink" title="UIImageView常见的方法"></a>UIImageView常见的方法</h5><pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startAnimating;   <span class="comment">// 开始动画</span></div><div class="line">- (<span class="keyword">void</span>)stopAnimating;  <span class="comment">// 停止动画</span></div><div class="line">- (<span class="built_in">BOOL</span>)isAnimating;  <span class="comment">// 是否正在执行动画</span></div></pre></td></tr></table></figure>
</code></pre><h5 id="UIImage"><a href="#UIImage" class="headerlink" title="UIImage"></a>UIImage</h5><ul>
<li>一个UIImage对象代表一张图片对象</li>
<li>创建方法</li>
<li><code>imageName:</code> </li>
<li><code>imageWithContentOfFile:</code></li>
</ul>
<h3 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h3><h5 id="UIButton的作用"><a href="#UIButton的作用" class="headerlink" title="UIButton的作用"></a>UIButton的作用</h5><ul>
<li>可以和用户交互</li>
<li>既能显示图片,也能显示文字</li>
</ul>
<h5 id="UIButton的状态"><a href="#UIButton的状态" class="headerlink" title="UIButton的状态"></a>UIButton的状态</h5><ul>
<li>normal（普通状态）<br>  默认情况（Default）<br>   对应的枚举常量：UIControlStateNormal </li>
<li>highlighted（高亮状态）<br>   按钮被按下去的时候（手指还未松开）<br>   对应的枚举常量：UIControlStateHighlighted</li>
<li>disabled（失效状态，不可用状态）<br>   如果enabled属性为NO，就是处于disable状态，代表按钮不可以被点击<br>   对应的枚举常量：UIControlStateDisabled</li>
</ul>
<h5 id="UIButton的常见方法"><a href="#UIButton的常见方法" class="headerlink" title="UIButton的常见方法"></a>UIButton的常见方法</h5><pre><code><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setTitle:(<span class="built_in">NSString</span> *)title forState:(<span class="built_in">UIControlState</span>)state;  <span class="comment">//设置按钮的文字</span></div><div class="line">- (<span class="keyword">void</span>)setTitleColor:(<span class="built_in">UIColor</span> *)color forState:(<span class="built_in">UIControlState</span>)state;  <span class="comment">//设置按钮的文字颜色</span></div><div class="line">- (<span class="keyword">void</span>)setImage:(<span class="built_in">UIImage</span> *)image forState:(<span class="built_in">UIControlState</span>)state;   <span class="comment">//设置按钮内部的小图片</span></div><div class="line">- (<span class="keyword">void</span>)setBackgroundImage:(<span class="built_in">UIImage</span> *)image forState:(<span class="built_in">UIControlState</span>)state;  <span class="comment">//设置按钮的背景图片</span></div></pre></td></tr></table></figure>
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIImageView详解和AVplayer简单使用]]></title>
      <url>http://yoursite.com/2016/10/10/UIImageView%E8%AF%A6%E8%A7%A3%E5%92%8CAVplayer%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="contentMode属性"><a href="#contentMode属性" class="headerlink" title="contentMode属性"></a>contentMode属性</h2><ul>
<li><p>带有scale单词的：图片有可能会拉伸</p>
<ul>
<li>UIViewContentModeScaleToFill<ul>
<li>将图片拉伸至填充整个imageView</li>
<li>图片显示的尺寸跟imageView的尺寸是一样的</li>
</ul>
</li>
<li>带有aspect单词的：保持图片原来的宽高比<ul>
<li>UIViewContentModeScaleAspectFit<ul>
<li>保证刚好能看到图片的全部</li>
</ul>
</li>
<li>UIViewContentModeScaleAspectFill<ul>
<li>拉伸至图片的宽度或者高度跟imageView一样</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>没有scale单词的：图片绝对不会被拉伸，保持图片的原尺寸</p>
<ul>
<li>UIViewContentModeCenter</li>
<li>UIViewContentModeTop</li>
<li>UIViewContentModeBottom</li>
<li>UIViewContentModeLeft</li>
<li>UIViewContentModeRight</li>
<li>UIViewContentModeTopLeft</li>
<li>UIViewContentModeTopRight</li>
<li>UIViewContentModeBottomLeft</li>
<li>UIViewContentModeBottomRight</li>
</ul>
</li>
</ul>
<h2 id="小语法点"><a href="#小语法点" class="headerlink" title="小语法点"></a>小语法点</h2><ul>
<li>不能直接修改：OC对象的结构体属性的成员</li>
<li>下面的写法是错误的</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imageView.frame.size = imageView.image.size;</div></pre></td></tr></table></figure>
<ul>
<li>正确写法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> tempFrame = imageView.frame;</div><div class="line">tempFrame.size = imageView.image.size;</div><div class="line">imageView.frame = tempFrame;</div></pre></td></tr></table></figure>
<h2 id="initWithImage-方法"><a href="#initWithImage-方法" class="headerlink" title="initWithImage:方法"></a>initWithImage:方法</h2><ul>
<li>利用这个方法创建出来的imageView的尺寸和传入的图片尺寸一样</li>
</ul>
<h2 id="修改frame的3种方式"><a href="#修改frame的3种方式" class="headerlink" title="修改frame的3种方式"></a>修改frame的3种方式</h2><ul>
<li>直接使用CGRectMake函数</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imageView.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</div></pre></td></tr></table></figure>
<ul>
<li>利用临时结构体变量</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> tempFrame = imageView.frame;</div><div class="line">tempFrame.origin.x = <span class="number">100</span>;</div><div class="line">tempFrame.origin.y = <span class="number">100</span>;</div><div class="line">tempFrame.size.width = <span class="number">200</span>;</div><div class="line">tempFrame.size.height = <span class="number">200</span>;</div><div class="line">imageView.frame = tempFrame;</div></pre></td></tr></table></figure>
<ul>
<li>使用大括号{}形式</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imageView.frame = (<span class="built_in">CGRect</span>)&#123;&#123;<span class="number">100</span>, <span class="number">100</span>&#125;, &#123;<span class="number">200</span>, <span class="number">200</span>&#125;&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><p>抽取重复代码</p>
<ul>
<li>将相同代码放到一个新的方法中</li>
<li>不同的代码就变成方法的参数</li>
</ul>
</li>
<li><p>图片的加载方式</p>
<ul>
<li><p>有缓存</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"图片名"</span>];</div></pre></td></tr></table></figure>
<ul>
<li>使用场合：图片比较小、使用频率较高</li>
<li>建议把需要缓存的图片直接放到Images.xcassets</li>
</ul>
</li>
<li><p>无缓存</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *file = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"图片名"</span> ofType:<span class="string">@"图片的扩展名"</span>];</div><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithContentsOfFile:<span class="string">@"图片文件的全路径"</span>];</div></pre></td></tr></table></figure>
<ul>
<li>使用场合：图片比较大、使用频率较小</li>
<li>不需要缓存的图片不能放在Images.xcassets</li>
</ul>
</li>
<li>放在Images.xcassets里面的图片，只能通过图片名去加载图片</li>
</ul>
</li>
<li><p>延迟做一些事情</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[abc performSelector:<span class="keyword">@selector</span>(stand:) withObject:<span class="string">@"123"</span> afterDelay:<span class="number">10</span>];</div><div class="line"><span class="comment">// 10s后自动调用abc的stand:方法，并且传递@"123"参数</span></div></pre></td></tr></table></figure>
<ul>
<li>音频文件的简单播放</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个音频文件的URL(URL就是文件路径对象)</span></div><div class="line"><span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"音频文件名"</span> withExtension:<span class="string">@"音频文件的扩展名"</span>];</div><div class="line"><span class="comment">// 创建播放器</span></div><div class="line"><span class="keyword">self</span>.player = [<span class="built_in">AVPlayer</span> playerWithURL:url];</div><div class="line"><span class="comment">// 播放</span></div><div class="line">[<span class="keyword">self</span>.player play];</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[storyboard文件的认识和UIView控件]]></title>
      <url>http://yoursite.com/2016/10/10/storyboard%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%A4%E8%AF%86%E5%92%8CUIView%E6%8E%A7%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="storyboard文件的认识"><a href="#storyboard文件的认识" class="headerlink" title="storyboard文件的认识"></a>storyboard文件的认识</h3><ul>
<li>作用：描述软件界面</li>
<li>程序启动的简单过程<ul>
<li>程序一启动，就会加载main.storyboard文件</li>
<li>会创建箭头所指向的控制器，并且显示控制器所管理的软件界面</li>
</ul>
</li>
<li>配置程序一启动就会加载storyboard文件<br><img src="/image/storyboard%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%A4%E8%AF%86%E5%92%8CUIView%E6%8E%A7%E4%BB%B6/%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3%E8%AE%BE%E7%BD%AE%E5%8A%A0%E8%BD%BDstoryboard.png" alt=""></li>
</ul>
<h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><ul>
<li>概念: 凡是继承自UIViewController的对象，都叫做控制器</li>
<li>注意: 每一个控制器都会专门管理一个软件界面</li>
<li>作用: 负责处理软件界面的各种事件，负责软件界面的创建和销毁</li>
</ul>
<h4 id="IBAction"><a href="#IBAction" class="headerlink" title="IBAction"></a>IBAction</h4><ul>
<li>只能修饰方法的返回值类型</li>
<li>被IBAction修饰的方法<ul>
<li>能拖线到storyboard中</li>
<li>返回值类型实际是void</li>
</ul>
</li>
<li>使用格式</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">`- (<span class="keyword">IBAction</span>)buttonClick</div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>`</p>
<h4 id="IBOutlet"><a href="#IBOutlet" class="headerlink" title="IBOutlet"></a>IBOutlet</h4><ul>
<li>只能修饰属性</li>
<li>被IBOutlet修饰的属性</li>
<li>能拖线到storyboard中</li>
<li>使用格式<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`<span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *label;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>`</p>
<h4 id="关于IBAction、IBOutlet前缀IB的解释"><a href="#关于IBAction、IBOutlet前缀IB的解释" class="headerlink" title="关于IBAction、IBOutlet前缀IB的解释"></a>关于IBAction、IBOutlet前缀IB的解释</h4><ul>
<li>全称: Interfce Builder</li>
<li>以前的UI界面开发模式: Xcode3 + Interfce Builder</li>
<li>从Xcode4开始，Interfce Builder已经整合到Xcode中了</li>
</ul>
<h4 id="类扩展-Class-Extension"><a href="#类扩展-Class-Extension" class="headerlink" title="类扩展(Class Extension)"></a>类扩展(Class Extension)</h4><ul>
<li>作用<ul>
<li>能为某个类增加额外的属性、成员变量、方法声明</li>
<li>一般将类扩展写到.m文件中</li>
<li>一般将一些私有的属性写到类扩展</li>
</ul>
</li>
<li>使用格式<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">`<span class="class"><span class="keyword">@interface</span> 类名()</span></div><div class="line"><span class="comment">/* 属性、成员变量、方法声明 */</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>`- 与分类的区别</p>
<ul>
<li>分类的小括号必须有名字<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">`<span class="class"><span class="keyword">@interface</span> 类名(分类名字)</span></div><div class="line"><span class="comment">/* 方法声明 */</span></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> 类名(分类名字)</span></div><div class="line"><span class="comment">/* 方法实现 */</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>`  - 分类只能扩充类方法</p>
<ul>
<li>如果在分类中声明了一个属性，分类只会生成这个属性的get/set方法声明</li>
</ul>
<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ul>
<li><p>第1个错误</p>
<ul>
<li>错误描述:<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`[\&lt;ViewController <span class="number">0x7fdc0152d300</span>\&gt; setValue:forUndefinedKey:](): <span class="keyword">this</span> <span class="keyword">class</span> is not key value coding-compliant <span class="keyword">for</span> the key label.</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>`  - 原因：IBOutlet属性代码被删掉了，但是属性连线还在</p>
<ul>
<li>解决：将残留的连线删掉</li>
</ul>
<ul>
<li><p>第2个错误</p>
<ul>
<li>错误描述：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`-[ViewController blueClick](): unrecognized selector sent to instance <span class="number">0x7ff59d014320</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>`  - 原因：调用了一个不存在的方法</p>
<ul>
<li>解决：认真检查方法名，使用正确并且存在的方法名</li>
</ul>
<h4 id="项目的常见属性"><a href="#项目的常见属性" class="headerlink" title="项目的常见属性"></a>项目的常见属性</h4><ul>
<li>Product Name<ul>
<li>产品名称</li>
<li>项目名称</li>
<li>软件名称</li>
</ul>
</li>
<li>Organization Name<ul>
<li>公司名称</li>
</ul>
</li>
<li>Organization Identifier<ul>
<li>公司的唯一标识</li>
<li>一般用网站域名的反写形式</li>
</ul>
</li>
<li>Bundle Identifier<ul>
<li>软件的唯一标识</li>
<li>默认 == Organization Identifier + ProductName</li>
</ul>
</li>
</ul>
<h4 id="第一个iOS程序-改变文字的属性"><a href="#第一个iOS程序-改变文字的属性" class="headerlink" title="第一个iOS程序-改变文字的属性"></a>第一个iOS程序-改变文字的属性</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">`- (<span class="keyword">IBAction</span>)clickButtonRed</div><div class="line">&#123;</div><div class="line"><span class="comment">// 改变文本颜色</span></div><div class="line"><span class="keyword">self</span>.label.textColor = [<span class="built_in">UIColor</span> redColor]();</div><div class="line"><span class="comment">// 改变背景颜色</span></div><div class="line"><span class="keyword">self</span>.label.backgroundColor = [<span class="built_in">UIColor</span> greenColor]();</div><div class="line"><span class="comment">// 文字居中</span></div><div class="line"><span class="keyword">self</span>.label.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line"><span class="comment">// 改变文字内容</span></div><div class="line"><span class="keyword">self</span>.label.text = <span class="string">@"红色"</span>;</div><div class="line"><span class="comment">// 改变字体大小</span></div><div class="line"><span class="keyword">self</span>.label.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">20.</span>f]();</div><div class="line"><span class="keyword">self</span>.redbutton.backgroundColor = [<span class="built_in">UIColor</span> redColor]();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>`### 模拟器常见功能和快捷键</p>
<ul>
<li>commend + h 返回桌面</li>
<li>commend + hh 删除程序</li>
</ul>
<h3 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h3><h4 id="父子控件"><a href="#父子控件" class="headerlink" title="父子控件"></a>父子控件</h4><ul>
<li>01-每个控件都是一个容器，能容纳其他控件</li>
<li>02-内部小控件是大控件的子控件</li>
<li>03-大控件是内部小控件的父控件</li>
<li>04-每一个控制器(UIViewController)内部都有一个默认的Uivew属性</li>
</ul>
<h4 id="UIView常见属性"><a href="#UIView常见属性" class="headerlink" title="UIView常见属性"></a>UIView常见属性</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`<span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIView</span> *superview;</div><div class="line"> 获得自己的父控件对象</div></pre></td></tr></table></figure>
<p>````objc<br>`@property(nonatomic,readonly,copy) NSArray *subviews;<br> 获得自己的所有子控件对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">````objc</div><div class="line">`@property(nonatomic) NSInteger tag;</div><div class="line"> 控件的ID(标识)，父控件可以通过tag来找到对应的子控件</div></pre></td></tr></table></figure></p>
<p>````objc<br>`@property(nonatomic) CGAffineTransform transform;<br> 控件的形变属性(可以设置旋转角度、比例缩放、平移等属性)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`</div><div class="line">### UIView常见方法</div><div class="line">```objc</div><div class="line">`- (void)addSubview:(UIView *)view;</div><div class="line"> 添加一个子控件view</div></pre></td></tr></table></figure></p>
<p>`<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`- (<span class="keyword">void</span>)removeFromSuperview;</div><div class="line"> 从父控件中移除</div></pre></td></tr></table></figure></p>
<p>`<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`- (<span class="built_in">UIView</span> *)viewWithTag:(<span class="built_in">NSInteger</span>)tag;</div><div class="line"> 根据一个tag标识找出对应的控件（一般都是子控件）</div></pre></td></tr></table></figure></p>
<p>`</p>
<h4 id="UIView位置和尺寸"><a href="#UIView位置和尺寸" class="headerlink" title="UIView位置和尺寸"></a>UIView位置和尺寸</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`<span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGRect</span> frame;</div><div class="line"> 控件矩形框在父控件中的位置和尺寸(以父控件的左上角为坐标原点)</div></pre></td></tr></table></figure>
<p>`<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`<span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGRect</span> bounds;</div><div class="line"> 控件矩形框的位置和尺寸(以自己左上角为坐标原点，所以bounds的x、y一般为<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>`<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`<span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGPoint</span> center;</div><div class="line"> 控件中点的位置(以父控件的左上角为坐标原点)</div></pre></td></tr></table></figure></p>
<p>`</p>
<h4 id="UIKit坐标系"><a href="#UIKit坐标系" class="headerlink" title="UIKit坐标系"></a>UIKit坐标系</h4><ul>
<li>在UIKit中，坐标系的原点(0，0)在左上角，x值向右正向延伸，y值向下正向延伸</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建Hexo博客]]></title>
      <url>http://yoursite.com/2016/10/08/%E6%90%AD%E5%BB%BAHexo/</url>
      <content type="html"><![CDATA[<p><strong>搭建博客教程:</strong> <a href="http://www.ac4fun.com/" title="http://www.ac4fun.com" target="_blank" rel="external">http://www.ac4fun.com</a><br><strong>常用命令:</strong><br>    hexo clean    : 清除public文件夹，重新部署之前的步骤<br>    hexo generate : 修改配置或者提交新文章后都需要重新部署，主要是声明public文件夹里面的内容<br>    hexo deploy   : 将更新后的的博客上传至你的github空间</p>
]]></content>
    </entry>
    
  
  
</search>
